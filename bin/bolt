#!/usr/bin/env bash

BOLT_VERSION="0.0.1"

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  # if $SOURCE was a relative symlink, resolve it relative to the path where the symlink file was located
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
BOLT_DIR="$( cd -P "$( dirname "$SOURCE" )/.." && pwd )"

BOLT_OPERATION=$1

if [ "$BOLT_OPERATION" == "verbose" ];then
  BOLT_VERBOSE=1
  BOLT_OPERATION=$2
  shift
fi

for file in $BOLT_DIR/lib/*.sh; do
  . $file
done

help() {
  version
  echo -e "\ncommands:"
  echo "types   - view list of supported assertion types"
  echo "status  - check state of bolt config"
  echo "          bolt status config.sh"
  echo "satsify - attempt to satisfy assertions in a bolt config"
  echo "          bolt satisfy config.sh"
  echo "check   - check state of a single bolt command"
  echo "          bolt check dir foo"
  echo "do      - satisfy a single bolt command"
  echo "          bolt do dir foo"
  echo ""
  echo "\"verbose\" as the first argument will add more"
  echo "detail to the operation output (if available)"
  echo "          bolt verbose do dir foo"
  echo ""
}

version() {
  echo "bolt $BOLT_VERSION"
}

case $BOLT_OPERATION in
  status|satisfy)
    if [ -f $2 ];then
      source $2; reporter
    else
      echo "Error: cannot read bolt config \"$2\""
      echo -e "\nDid you mean to run:\nbolt do\n"
      exit 1
    fi
    ;;
  do) BOLT_OPERATION="satisfy"; shift; ok $@; reporter;;
  check) BOLT_OPERATION="status"; shift; ok $@; reporter;;
  types)
    for type in $BOLT_DIR/types/*.sh; do
      echo "* $(basename ${type%.*})" && . $type 'desc'
      echo ""
    done
    ;;
  version) version;;
  help|?|*) help;;
esac
